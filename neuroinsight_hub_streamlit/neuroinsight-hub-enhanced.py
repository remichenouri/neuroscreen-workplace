import os
import streamlit as st
import pandas as pd
import plotly.express as px
import json

# --- CONFIGURATION G√âN√âRALE ---
st.set_page_config(
    page_title="NeuroInsight Hub",
    page_icon=":brain:",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- CHEMINS ROBUSTES POUR LE D√âPLOIEMENT ---
BASE_DIR   = os.path.dirname(os.path.abspath(__file__))
ASSETS_DIR = os.path.join(BASE_DIR, "assets")

def asset_path(filename):
    return os.path.join(ASSETS_DIR, filename)

# --- CSS PERSONNALIS√â POUR CONTRASTE ET STYLE RH ---
st.markdown("""
<style>
body, .main, .block-container {
    background: #181C23;
    color: #F3F6FC !important;
}
section[data-testid="stSidebar"] {
    background: #f4f5fa !important;
    color: #223c4c !important;
    border-right: 2px solid #CCC;
}
.sidebar-content {
    margin-top:1em !important;
}
header[data-testid="stHeader"] {
    background: linear-gradient(90deg,#161b22 40%, #1D2836 100%) !important;
    padding: 12px 0;
    color: #FFD700 !important;
    border-bottom: 2px solid #c4bc74;
}
h1, h2, h3, h4, h5 { color: #ffd700 !important; font-family: 'Inter', sans-serif; }
.st-emotion-cache-1d391kg {color: #223c4c!important;}
.metric-value, .metric-label {
    color: #223c4c!important;
}
.metric-card {
    background: #202630 !important;
    border-radius: 1em;
    padding: 1em 2em;
    box-shadow:0 2px 8px #0002;
    display:flex; flex-direction:column; align-items:center; justify-content:center;
    min-width:220px;
}
.module-card {
    background: #23272e;
    border-radius: 1em;
    margin-bottom:2em;
    box-shadow:0 2px 8px #0003;
    padding:2em;
}
input, select, textarea, .stTextInput>div>div>input, .stSelectbox>div>div>div {
    background: #191e23 !important;
    color: #fff !important;
    border: 1px solid #c4bc74 !important;
    border-radius:8px;
}
button, .stButton>button {
    background: linear-gradient(90deg,#223c4c,#c4bc74 90%)!important;
    color:#fff!important;
    border: 0px; border-radius: 9px!important;
    margin:.2em;
    transition:0.2s;
    font-weight: 500;
}
button:hover, .stButton>button:hover { 
    background: #aca45c!important; color: #181C23!important; transform: scale(1.03);
}
.stDataFrame {background:#1d2127!important;}
::-webkit-scrollbar { height:8px; width: 8px; background: #181C23;}
::-webkit-scrollbar-thumb { background:#c4bc74; border-radius:4px;}
footer { color: #888!important; background: #0d1117!important; }
.stAlert {
    background:#21262c!important;
    color:#ffd700!important;
    border:1px solid #c4bc74;
}
</style>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
""", unsafe_allow_html=True)

# --- CHARGEMENT DES DONN√âES DEMO ---
try:
    with open(os.path.join(BASE_DIR, "data", "metrics.json"), encoding="utf-8") as f:
        DATA = json.load(f)
except Exception:
    # fallback valeurs pour d√©mo
    DATA = {
        "company_metrics":{
            "neurodiverse_employees": 12,
            "roi_percentage": 312,
            "retention": 89,
            "wellbeing_score": 84
        },
        "performance_data": [
            {"department":"Tech","productivity":85,"engagement":90,"wellbeing":84},
            {"department":"Games","productivity":78,"engagement":88,"wellbeing":80},
            {"department":"Support","productivity":82,"engagement":91,"wellbeing":83},
        ],
        "recent_activities": [
            {"time":"2h","message":"Entretien RH d'onboarding inclusif"},
            {"time":"1j","message":"Impl√©mentation du bureau adapt√©"},
            {"time":"3j","message":"Feedback positif : manager TDAH"},
        ]
    }

# --- LOGO & HEADER ---
from PIL import Image

def get_logo_path():
    png_asset = asset_path("logo_neuroinsight.png")
    if os.path.exists(png_asset):
        return png_asset
    fallback = asset_path("fallback_brain_icon.png")
    if os.path.exists(fallback):
        return fallback
    return None

st.sidebar.image(get_logo_path(), width=70)
st.sidebar.markdown(
    "<h2 style='color:#223c4c'>NeuroInsight Hub</h2>"
    "<div style='color:#555;font-size:.9em'>Plateforme RH Professionnelle</div>",
    unsafe_allow_html=True
)

# --- SIDEBAR NAVIGATION ---
MODULES = [
    "Dashboard Principal",  "Screening TDAH", "Profil Autisme",  "Observatoire", 
    "Accommodations", "Analytics", "Learning & Development","Settings"
]
selected = st.sidebar.selectbox(
    "Navigation", MODULES, key="module_select", 
    format_func=lambda x: f"üß© {x}" if x != "Settings" else "‚öôÔ∏è Param√®tres"
)
st.sidebar.markdown("<hr>", unsafe_allow_html=True)
st.sidebar.markdown("<b>M√©triques Temps R√©el</b>", unsafe_allow_html=True)
st.sidebar.metric("Employ√©s Neurodivers", f"{DATA['company_metrics']['neurodiverse_employees']}")
st.sidebar.metric("ROI Programme", f"{DATA['company_metrics']['roi_percentage']}%")
st.sidebar.metric("R√©tention", f"{DATA['company_metrics']['retention']}%")

# --- MAIN CONTENT: MODULES ---

if selected == "Dashboard Principal":
    st.markdown("<h1>Neurolnsight Hub</h1>", unsafe_allow_html=True)
    st.markdown("Workspace RH ‚Äì Gestion Professionnelle de la Neurodiversit√©")
    st.markdown("#### Dashboard Principal")
    st.caption("Vue d‚Äôensemble compl√®te de la neurodiversit√© en entreprise")
    
    # KPI CARDS
    col1, col2, col3, col4 = st.columns(4)
    kpi = DATA['company_metrics'] 
    with col1:
        st.markdown("<div class='metric-card'><span style='font-size:2.6em;'>"
                    f"{kpi['neurodiverse_employees']}</span><br>NEURODIVERS</div>", unsafe_allow_html=True)
    with col2:
        st.markdown("<div class='metric-card'><span style='font-size:2.6em;color:#3fb950;'>"
                    f"{kpi['roi_percentage']}%</span><br>ROI PROGRAMME</div>",unsafe_allow_html=True)
    with col3:
        st.markdown("<div class='metric-card'><span style='font-size:2.6em;color:#58a6ff;'>"
                    f"{kpi['retention']}%</span><br>R√âTENTION</div>",unsafe_allow_html=True)
    with col4:
        st.markdown("<div class='metric-card'><span style='font-size:2.6em;color:#FFD700;'>"
                    f"{kpi.get('wellbeing_score',84)}%</span><br>BIEN-√äTRE</div>",unsafe_allow_html=True)
    st.markdown("<br>", unsafe_allow_html=True)
    
    # PERFORMANCE PAR DEPT
    dept_df = pd.DataFrame(DATA["performance_data"])
    st.markdown("### Indicateurs Cl√©s de Performance")
    fig = px.bar(
        dept_df, x="department", y=["productivity", "engagement", "wellbeing"],
        barmode="group", color_discrete_map={
            "productivity": "#58a6ff", "engagement": "#FFD700", "wellbeing": "#3fb950"
        }
    )
    fig.update_layout(plot_bgcolor='#202630', paper_bgcolor='#202630', font=dict(color='#F3F6FC'))
    st.plotly_chart(fig, use_container_width=True)
    
    # Activit√©s r√©centes
    st.markdown("### Activit√©s R√©centes")
    for act in DATA["recent_activities"]:
        st.markdown(
            f"<div style='background:#23272e;padding:10px;margin-bottom:4px;border-radius:8px;'>"
            f"<b>{act['time']}</b> ‚Äì {act['message']}</div>", unsafe_allow_html=True
        )

# --------------- MODULE TDAH SCREENING (WORKPLACE) ---------------
elif selected == "Screening TDAH":
    st.markdown("<h2>ü¶∏‚Äç‚ôÇÔ∏è Evaluation TDAH en Milieu Professionnel</h2>", unsafe_allow_html=True)
    st.caption("Bas√© sur l‚ÄôASRS v1.1, enrichi pour le contexte entreprise")
    
    questions = [
        ("Vous arrive-t-il souvent d‚Äôavoir du mal √† organiser une t√¢che professionnelle longue ou √† multiples √©tapes ?", "Organisation"),
        ("Avez-vous des difficult√©s √† rester concentr√© dans une r√©union ?","Attention"),
        ("Perdez-vous fr√©quemment des objets n√©cessaires sur votre lieu de travail ?", "Organisation"),
        ("Vous interrompez-vous ou coupez-vous la parole lors des discussions en √©quipe ?", "Impulsivit√©"),
        ("Rencontrez-vous souvent du mal √† suivre une proc√©dure √©crite complexe ?", "Attention"),
        ("√âprouvez-vous le besoin de bouger ou de manipuler des objets lors des r√©unions prolong√©es ?", "Hyperactivit√©"),
        ("Avez-vous tendance √† √©viter ou reporter les t√¢ches administratives r√©p√©titives ?", "Attention"),
        ("Difficult√© √† respecter des d√©lais professionnels ?", "Organisation"),
        ("Vous arrive-t-il de finir les phrases des coll√®gues avant eux ?", "Impulsivit√©"),
        ("Oubliez-vous vos rendez-vous ou deadlines importants ?", "M√©moire de travail"), 
        ("Changez-vous r√©guli√®rement d‚Äôoutil sans finir la t√¢che en cours ?", "Planification"),
        ("Avez-vous des r√©actions √©motionnelles marqu√©es face √† une critique ?", "R√©gulation √©motionnelle"),
        ("Avez-vous fr√©quemment des pens√©es envahissantes au travail ?", "Gestion Attentive"),
        ("Faites-vous des erreurs d‚Äôinattention dans l‚Äôutilisation d‚Äôoutils num√©riques ?", "Attention"),
        ("Vous sentez-vous souvent d√©bord√© par le nombre de mails/projets ?", "Gestion du temps"),
        ("Avez-vous du mal √† traiter plusieurs t√¢ches simultan√©ment ?", "Planification"),
    ]
    st.markdown("**Veuillez indiquer √† quelle fr√©quence vous rencontrez ces situations dans votre quotidien professionnel.**")
    responses = {}
    options = ["Jamais", "Rarement", "Parfois", "Souvent", "Tr√®s souvent"]
    score_map = dict(zip(options, range(5)))
    
    for idx, (q,cat) in enumerate(questions):
        key = f"tdah_{idx}"
        responses[key] = st.selectbox(
            f"{q}", options, key=key
        )
    # Calcul du score
    global_score = sum([score_map[resp] for resp in responses.values()])
    st.markdown(f"<br><div class='module-card'><b>Score global :</b> <span style='font-size:1.5em;color:#FFD700'>{global_score} / {5*len(questions)}</span></div>",unsafe_allow_html=True)
    # Interpr√©tation
    if global_score >= 48:
        st.error("Le score r√©v√®le une forte probabilit√© de TDAH impactant sur l‚Äôenvironnement de travail. Une √©valuation approfondie et des accommodations sont recommand√©es.")
    elif global_score >= 30:
        st.warning("Des difficult√©s typiques du TDAH sont pr√©sentes au travail. Des ajustements RH pr√©ventifs sont √† envisager.")
    else:
        st.success("Peu d‚Äôindices de TDAH professionnels d√©tect√©s.")
    # Affichage par dimension
    st.markdown("#### Carte Profil TDAH Workplace")
    cat_scores = {}
    for idx, (q,cat) in enumerate(questions):
        cat_scores.setdefault(cat, 0)
        cat_scores[cat] += score_map[responses[f"tdah_{idx}"]]
    radar_data = pd.DataFrame([cat_scores])
    fig2 = px.line_polar(radar_data, r=radar_data.T[0], theta=cat_scores.keys(), 
                         line_close=True, color_discrete_sequence=["#ffd700"])
    fig2.update_traces(fill='toself')
    fig2.update_layout(
        polar=dict(bgcolor='#202630'), plot_bgcolor='#23272e', paper_bgcolor='#202630',
        font=dict(color='#FFD700')
    )
    st.plotly_chart(fig2, use_container_width=True)
    st.info("**Pour toutes difficult√©s d√©tect√©es, voir suggestions d‚Äôaccommodations dans l‚Äôonglet d√©di√©.**")

# --------------- MODULE AUTISME SCREENING (WORKPLACE) ---------------
elif selected == "Profil Autisme":
    st.markdown("<h2>üå± Profil Autistique Professionnel</h2>", unsafe_allow_html=True)
    st.caption("Inspir√© des questionnaires RAADS et outils professionnels workplace, multi-domaines")
    asd_questions = [
        ("Pr√©f√©rez-vous travailler sur des projets individuels ?", "Sociabilit√©"),
        ("Avez-vous des routines importantes pour votre √©quilibre au travail ?", "Flexibilit√©"),
        ("Avez-vous des int√©r√™ts tr√®s marqu√©s ou sp√©cialis√©s ?", "Focalisation"),
        ("Difficult√© √† d√©coder l‚Äôimplicite ou le non-verbal en r√©union ?", "Communication"),
        ("Sensibilit√© accrue au bruit/lumi√®re au travail ?", "Sensoriel"),
        ("Avez-vous du mal √† interpr√©ter les normes sociales implicites ?", "Sociabilit√©"),
        ("Grande facult√© √† rep√©rer les erreurs/probl√®mes dans les process ?", "Forces D√©tail"),
        ("Pr√©f√©rence pour les consignes claires et directives ?", "Structure"),
        ("Fatigue apr√®s des interactions sociales prolong√©es ?", "Sociabilit√©"),
        ("Grande capacit√© de concentration sur votre domaine ?", "Focalisation"),
        ("Cr√©ativit√© dans la r√©solution de probl√®mes techniques ?", "Comp√©tence"),
        ("Utilisez-vous des objets pour g√©rer le stress sensoriel ?", "Sensoriel"),
        ("Avez-vous besoin de clart√©/routine dans vos t√¢ches quotidiennes ?", "Structure"),
        ("Plus √† l‚Äôaise √† l‚Äô√©crit qu‚Äô√† l‚Äôoral au travail ?", "Communication"),
        ("Int√©r√™t pour l‚Äôapprofondissement d‚Äôun sujet pr√©cis ?", "Focalisation"),
        ("Difficult√© √† changer d‚Äôenvironnement sans pr√©paration ?", "Flexibilit√©"),
        ("Hypertol√©rance ou intol√©rance √† certains environnements sensoriels ?", "Sensoriel"),
        ("Rapidit√© √† remarquer les diff√©rences ou incoh√©rences dans les process ?", "Forces D√©tail"),
    ]
    asd_options = ["Jamais", "Rarement", "Parfois", "Souvent", "Tr√®s souvent"]
    asd_score_map = dict(zip(asd_options, range(5)))
    asd_responses = {}
    for idx, (q,cat) in enumerate(asd_questions):
        key = f"asd_{idx}"
        asd_responses[key] = st.selectbox(q, asd_options, key=key)
    score_asd = sum([asd_score_map[asd_responses[k]] for k in asd_responses])
    st.markdown(f"<br><div class='module-card'><b>Score global :</b> <span style='font-size:1.5em;color:#58a6ff'>{score_asd} / {5*len(asd_questions)}</span></div>", unsafe_allow_html=True)
    st.markdown("#### Profil radar comp√©tences et sensibilit√©s")
    asd_cat_scores = {}
    for idx, (q,cat) in enumerate(asd_questions):
        asd_cat_scores.setdefault(cat,0)
        asd_cat_scores[cat] += asd_score_map[asd_responses[f"asd_{idx}"]]
    asd_radar_data = pd.DataFrame([asd_cat_scores])
    fig3 = px.line_polar(asd_radar_data, r=asd_radar_data.T[0], theta=asd_cat_scores.keys(),
                         line_close=True, color_discrete_sequence=["#58a6ff"])
    fig3.update_traces(fill='toself')
    fig3.update_layout(
        polar=dict(bgcolor='#202630'), plot_bgcolor='#23272e', paper_bgcolor='#202630',
        font=dict(color='#58a6ff')
    )
    st.plotly_chart(fig3, use_container_width=True)
    if score_asd > 45:
        st.warning("Le profil montre de nombreuses forces et besoins atypiques en entreprise, il est recommand√© d'explorer des accommodations sp√©cifiques et de valoriser la diversit√© cognitive pour la performance collective.")

# --------------- MODULE OBSERVATOIRE ---------------
elif selected == "Observatoire":
    st.markdown("<h2>üìä Observatoire Neurodiversit√©</h2>", unsafe_allow_html=True)
    st.caption("√âvolution 2020-2025 de la pr√©valence et de la prise en compte neurodiversit√© (France & Monde)")
    data_observatoire = pd.DataFrame({
        "Ann√©e": [2020, 2021, 2022, 2023, 2024, 2025],
        "TDAH (%)": [4.8, 5, 5.2, 5.3, 5.35, 5.4],
        "Autisme (%)": [1.1, 1.2, 1.3, 1.5, 1.6, 1.8],
        "Dyslexie (%)": [6.0, 6.1, 6.2, 6.25, 6.3, 6.4],
        "Handicap Reconnu (%)": [3, 3.4, 3.7, 4.2, 5.1, 6]
    })
    st.markdown("#### Pr√©valence en France (%) - Tableau Historique")
    st.dataframe(data_observatoire.style.background_gradient(subset=data_observatoire.columns[1:], cmap='cividis'))
    st.markdown("#### Visualisation Interactive")
    fig4 = px.line(
        data_observatoire.melt(id_vars="Ann√©e"), 
        x="Ann√©e", y="value", color="variable",
        markers=True, color_discrete_sequence=["#ffd700","#58a6ff","#3fb950","#c4bc74"]
    )
    fig4.update_layout(
        plot_bgcolor='#23272e', paper_bgcolor='#202630',
        legend=dict(font=dict(color="#ffd700")),
        font=dict(color='#f3f6fc')
    )
    st.plotly_chart(fig4, use_container_width=True)
    st.info("Hausse confirm√©e des diagnostics et des d√©marches inclusives partout en France et Europe (Insee, 2025).")

# --------------- MODULE ACCOMMODATIONS RH COMPLETES ---------------
elif selected == "Accommodations":
    st.markdown("<h2>üõ†Ô∏è Accommodations RH Entreprises</h2>", unsafe_allow_html=True)
    st.caption("Liste exhaustive des am√©nagements et bonnes pratiques d√©j√† mis en place en entreprises.")
    accommodations_db = {
        "Environnement Physique": [
            "Bureau calme ou isol√©",
            "Casque antibruit professionnel",
            "√âclairage LED personnalis√©",
            "Bureau debout ou ballon ergonomique",
            "Plantes/plantes anti-stress",
            "Objets fidget ou anti-stress",
            "Zone sensorielle de retrait"
        ],
        "Temps & Organisation": [
            "Horaires flexibles ou am√©nagements de planning",
            "T√©l√©travail adapt√© (jours fixes, exceptionnel, total)",
            "Pauses fr√©quentes et pr√©vues",
            "D√©coupage des t√¢ches en sous-t√¢ches",
            "Process de travail individualis√©",
            "Rappels automatiques num√©riques",
            "Pr√©paration syst√©matique des r√©unions (ordre du jour, compte-rendu)",
            "Lissage de la charge de travail hebdo"
        ],
        "Technologies & Outils": [
            "Logiciels anti-distraction (Freedom, ColdTurkey)",
            "Gestion du temps (Forest, Todoist, Pomodoro)",
            "Reconnaissance vocale ou synth√®se vocale",
            "Double √©cran ou grand √©cran",
            "Simplification de l'interface des outils internes",
            "Check-list num√©rique",
            "Applications d'organisation personnelle"
        ],
        "Management": [
            "Feedback fr√©quent et constructif personnalis√©",
            "Objectifs SMART adapt√©s",
            "Formations managers (diversit√© cognitive)",
            "Suivi de mission r√©gulier",
            "Rituel d'accueil d√©di√©",
            "Droit √† l'erreur affich√©",
            "R√©unions d'√©quipe adapt√©es"
        ],
        "Relations sociales": [
            "M√©diation en cas de conflit par r√©f√©rent",
            "Communication √©crite privil√©gi√©e",
            "R√©duction pr√©sence √† certains √©v√©nements",
            "Bin√¥me/buddy system d'int√©gration",
            "Temps prot√©g√© sans sollicitations",
            "Sensibilisation du collectif travail",
            "Support pair-√†-pair"
        ],
        "Formation & Sensibilisation": [
            "Sessions courtes et interactives",
            "Supports visuels/multim√©dia",
            "Mode hybride (en pr√©sentiel ou √† distance)",
            "Acc√®s facilit√© √† la documentation",
            "Formation individuelle personnalis√©e",
            "Tutorat d√©di√©"
        ],
        "RH L√©gal & Parcours de Carri√®re": [
            "R√©f√©rent handicap identifi√©",
            "Confidentialit√© stricte du dossier m√©dical",
            "Plan d'√©volution adapt√©",
            "√âvaluations annuelles accomod√©es",
            "Parcours promotion interne fl√©ch√©",
            "Acc√®s aux entretiens sans filtre"
        ],
        "Bien-√™tre & Sant√©": [
            "Acc√®s facilit√© √† la m√©decine du travail",
            "Suivi psychologique pr√©ventif",
            "Prise en charge ergonomique compl√®te",
            "Ateliers gestion du stress",
            "Accompagnement √† la charge mentale",
            "Jours d'absence autoris√©s pour soins",
            "Tiers de confiance neutre"
        ]
    }
    for cat, lst in accommodations_db.items():
        with st.expander(cat):
            for acc in lst:
                st.markdown(f"- {acc}")

# --------------- MODULE ANALYTICS (KPIs RH) ---------------
elif selected == "Analytics":
    st.markdown("<h2>üìà Analytics RH & Reporting</h2>", unsafe_allow_html=True)
    st.caption("Visualisation d√©taill√©e des KPIs de la politique neurodiversit√© et impact entreprise.")
    analytics_data = pd.DataFrame({
        "D√©partement":["Tech","Games","Support"],
        "Turnover (%)":[5.1, 6.5, 4.2],
        "Int√©grations (%)":[17,13,11],
        "ROI Accommodations (%)":[324,295,275]
    })
    st.dataframe(analytics_data.style.background_gradient(cmap='bone'))
    fig5 = px.bar(
        analytics_data, x="D√©partement", y=["Turnover (%)","Int√©grations (%)","ROI Accommodations (%)"],
        barmode="group", color_discrete_map={
            "Turnover (%)":"#FFD700","Int√©grations (%)":"#58a6ff","ROI Accommodations (%)":"#3fb950"
        }
    )
    fig5.update_layout(plot_bgcolor='#202630',paper_bgcolor='#202630',font=dict(color='#f3f6fc'))
    st.plotly_chart(fig5, use_container_width=True)

# --------------- LEARNING & DEV ---------------
elif selected == "Learning & Development":
    st.markdown("<h2>üéì Learning & Development</h2>", unsafe_allow_html=True)
    st.caption("Formations, onboarding, documentation et progression des salari√©s.")
    learn_data = pd.DataFrame([
        {"programme":"Onboarding inclusif","taux_completion":98,"participants":112},
        {"programme":"Formation managers handicap","taux_completion":89,"participants":42},
        {"programme":"Atelier gestion du stress","taux_completion":81,"participants":61},
        {"programme":"Sensibilisation neurodiversit√©","taux_completion":94,"participants":170}
    ])
    st.dataframe(learn_data.style.background_gradient(subset=["taux_completion"], cmap='summer'))

# --------------- SETTINGS ---------------
elif selected == "Settings":
    st.markdown("<h2>‚öôÔ∏è Param√®tres Utilisateur</h2>",unsafe_allow_html=True)
    col1, col2 = st.columns(2)
    with col1:
        st.text_input("Nom d‚Äôutilisateur", value="admin")
        st.selectbox("Th√®me couleur",["Sombre (par d√©faut)","Clair"])
    with col2:
        st.radio("Accessibilit√© visuelle",["Police standard","Police tr√®s grande"])
        st.checkbox("Animations CSS", value=True)
    st.info("Pour toute suggestion ou am√©lioration, contactez l‚Äô√©quipe RH d√©di√©e.")

# --- FOOTER ---
st.markdown(
    "<div style='text-align:center; margin-top:40px; padding:24px 0; background:#161b22; color:#FFD700; font-size:.95em;'>"
    "¬© 2025 Ubisoft ‚Äì NeuroInsight Hub &nbsp;&#x2022;&nbsp; Plateforme RH Inclusive"
    "</div>", unsafe_allow_html=True
)
