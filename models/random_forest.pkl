# Script pour générer le modèle Random Forest
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score, classification_report
import joblib

# Générer des données d'exemple
np.random.seed(42)
n_samples = 1000

data = {
    'creative_score': np.random.normal(75, 15, n_samples),
    'burnout_scale': np.random.randint(1, 11, n_samples),
    'communication_style': np.random.choice(['visual', 'analytical', 'social'], n_samples),
    'years_experience': np.random.randint(1, 20, n_samples),
    'team_size': np.random.randint(3, 15, n_samples)
}

df = pd.DataFrame(data)

# Encoder les variables catégorielles
df['communication_visual'] = (df['communication_style'] == 'visual').astype(int)
df['communication_analytical'] = (df['communication_style'] == 'analytical').astype(int)
df = df.drop('communication_style', axis=1)

# Créer la variable cible (TDAH risk)
df['adhd_risk'] = ((df['creative_score'] > 85) & (df['burnout_scale'] > 6)).astype(int)

# Features et target
X = df.drop('adhd_risk', axis=1)
y = df['adhd_risk']

# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Entraîner le modèle
model = RandomForestClassifier(
    n_estimators=200,
    max_depth=10,
    min_samples_split=5,
    min_samples_leaf=2,
    random_state=42,
    class_weight='balanced'
)

model.fit(X_train, y_train)

# Évaluer
y_pred = model.predict(X_test)
f1 = f1_score(y_test, y_pred)
print(f"F1-Score: {f1:.3f}")
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Sauvegarder
joblib.dump(model, 'models/random_forest.pkl')
print("Modèle sauvegardé : models/random_forest.pkl")
